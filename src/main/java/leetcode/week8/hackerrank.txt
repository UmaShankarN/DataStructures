Problem 1:
In securities research, an analyst will look at a number of attributes for a stock. One analyst would like to
keep a record of the highest positive spread between a closing price and the closing price on any prior day
in history. Determine the maximum positive spread for a stock given its price history. If the stock remains
flat or declines for the full period, return -1.
Example 0
px = [7, 1, 2, 5]
Calculate the positive difference between each price and its predecessors:
At the first quote, there is no earlier quote to compare to.
At the second quote, there was no earlier price that was lower.
At the third quote, the price is higher than the second quote:
2 - 1 = 1
For the fourth quote, the price is higher than the third and the second quotes:
5 - 2 = 3
5 - 1 = 4.
The maximum difference is 4.
Example 1
px = [7, 5, 3, 1]
The price declines each quote, so there is never a difference greater than 0. In this case, return -1.
Function Description
Complete the function maxDifference in the editor below.
maxDifference has the following parameters:
int px[n]: an array of stock prices (quotes)
Returns:
int: the maximum difference between two prices as described above

Prob 2:
Problem 2:

It is a circular printer wheel with the letters A through Z in sequence. It wraps so A and Z are adjacent.
The printer has a pointer that is initially at 'A'. Moving from any character to any adjacent character takes 1
second. It can move in either direction. Given a string of letters, what is the minimum time needed to print
the string? (Note: Assume that printing does not take any time. Only consider the time it takes for the
pointer to move.)
Example
s = "BZA"

A B C D
E
F
G
H
I
J K
ON ML
P Q
R
S
T
U
V W X Y Z

Total time
to print “BZA”

= 1+ 2 + 1 = 4 seconds

First, move the pointer from 'A' to 'B' (1 second), then from 'B' to 'Z' (2 seconds), and finally from 'Z' to 'A' (1
second). So the minimum time needed to print "BZA" is 4 seconds.
Function Description
Complete the function getTime in the editor below.
getTime has the following parameter:
string s: the string of characters that need to be printed
Returns:
int: the minimum number of seconds needed to print s


Problem 3:
You are given a complex list of n products, each with a name, price, and weight. Find out how many
duplicate products are present within the list. Duplicate products contain identical parameters for all fields
in the list (i.e. name, price, and weight).
Example:
There are n = 5 products with attributes listed in three arrays, aligned by index.
name = [ball, bat, glove, glove, glove]
price = [2, 3, 1, 2, 1]
weight = [2, 5, 1, 1, 1]
A complete item description for item 0: (name[0], prices[0], weight[0]) is (ball, 2, 2)
Name Price Weight
ball 2 2
bat 3 5
glove 1 1
glove 2 1
glove 1 1


The first two items are unique.
The two gloves at indices 2 and 4 are equal in all three attributes so there is 1 duplicate.
The last glove at index 3 has a different price from the other two, so it is not a duplicate.
There is 1 duplicate item in the original list.